---
layout: post
title:  "异常与中断"
date:   2018-04-011 11:33:25 +0800
categories: boot
---
# 异常
对于MIPS 体系结构来说，所有打断程序正常执行的事件都是异常（exception）。MIPS采用
了一套统一的方案来处理异常。对于Exception这个英文单词，在中文文献中有两个常见的
译法，一个是译为“异常”，本文采用这种译法；另一个译法是“例外”，在龙芯官方的手册中，
采用译法是“例外”。这两种译法没有什么好坏之分，只是习惯问题。但对于不熟悉这个领域
的人，可能会造成一些困扰。在网络空间中讨论哪一种译法更好，常常会引发一场大规模械
斗，很无聊也很浪费时间，没有什么意义。为了不必要的麻烦，专业人士有时会直接用
“Exception”这个英文单词。

钱钟书先生对于在中文里夹杂英文单词颇有微词，形容为牙缝里塞了肉却不剔掉，只是为了
显摆自己吃过肉了。但是对于计算机专业的人士来说，一篇文章里夹杂大量英文词汇和首字
母缩略词却是不可避免的，版面中英文混杂，显得很破碎，很不好看，但是没办法，谁让咱
天天吃肉呢。也许有朝一日，中国在IT技术领域世界领先了，技术上都是中国原创，大量的
新概念新词汇都是中文首创，技术文档都是中文的，那时就不用常常加杂英文词汇了，我们
期待着这一天的到来。

## 异常处理
异常发生后，CPU要完成一系列的工作：
  1. 设置EPC，使其指向返回地址；
  2. 设置SR(EXL) = 1，使CPU进入内核态，并关中断；
  3. 设置Cause寄存器，以便软件查看异常发生的原因，如果是地址异常，还要设置好
     BadVAddr；
  4. CPU开始从异常入口点取指并执行。
  
## 从异常返回
`eret`指令从异常返回，它会设置SR(EXL) = 0，然后返回去执行EPC指向的指令。

## 异常嵌套
如果在执行异常处理例程时，还允许其它异常发生，就叫做异常嵌套。

如果处理不好，异常嵌套会引起大麻烦，新的异常会更改EPC和SR，因此，在允许嵌套异常
发生之前，先要保存这两个寄存器的内容。另外，k0和k1这两个寄存器是专用于异常处理的，
如果允许新异常发生，这两个寄存器的内容也许会被新异常的处理例程修改，所以最好先做
备份。

## 异常处理例程
下面是一个最简单的异常处理例程的例子，它只是统计异常发生的次数，别的什么都不做：

```
    .set noreorder
	.set noat
xcptgen:
    la k0, xcptcount   # get address of counter
	lw k1, 0(k0)       # load counter
	addu k1, 1         # increment counter
	sw k1, 0(k0)       # store counter
	eret               # return to program
	.set at
	.set reorder
```

# 中断
异常处理机制是通用的，但有两种异常发生得最为频繁，一种是TLB miss，另一种就是中断。
当外部设备有事情要通知CPU时，就会发生中断。

## 与中断有关的寄存器资源
在Cause寄存器中，有8个独立的中断位，IP0:IP7。其中，IP0和IP1 这两个是软中断，
IP2:IP7这6个是外部硬件中断。

SR寄存器中有三个与中断有关的位：
  1. SR(IE) 是中断使能位，为1时，才允许中断发生，否则关中断；
  2. 如果SR(EXL) (exception level) 和 SR(ERL) (error level)置位，也就是为1时，禁
     止中断；异常发生后，它们中的一个会被立即置位，以禁止再次发生异常。
  3. 状态寄存器（SR）中有8个独立的中断屏蔽位IM0:IM7，每个位对应着Cause寄存器中的
     一个中断。SR(IM)置位时，允许相对应的中断发生，程序可以用它们决定允许哪些中
     断，不允许哪些中断。


## 中断优先级

## 临界区·关中断·信号量
