---
layout: post
title:  "调度：概述"
date:   2016-03-29 08:01:25 +0800
categories: kernel
---
# 调度：概述
现在大家对进程运行的底层机制（比如上下文切换）应该很清楚了；如果还是不太明白，
翻回去看看前面两章，再读一读此类工作是如何进行的。不过，我们还不知道OS调度器采
用的高层策略（有时也叫原则），这些年，那些聪明刻苦的人研发出了很多此类策略。

事实上，调度的起源比计算机系统还要早；起初，从经营管理领域借鉴了一些方法，并应
用于计算机。这其实并不奇怪：装配线之类的人类努力也需要调度，所关注的问题也基本
相同，包括对效率的不懈追求。因此，我们的问题在于：

> 症结：如何制定调度策略
---------------------
考虑调度策略时，我们应该如何制定一个基本框架？关键的假设
是什么？哪些尺度是重要的？在计算机系统的初期曾经采用过哪些方法？

## 工作负载假设

首先我们放松第三条假设的限制，因为所有的程序都要进行输入输出。设想有个程序不接受输入：
那么每次执行其输出都是一样的。在设想一个没有输出的程序：它就象森林中的一棵树，没有人
见过它，它运行与否都无所谓。

